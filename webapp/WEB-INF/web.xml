<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>WorkManageSystem</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  <!-- 初始化过程：
	1、在启动Web项目时，容器(比如Tomcat)会读web.xml配置文件中的两个节点<listener>和<contex-param>。
	2、接着容器会创建一个ServletContext(上下文),应用范围内即整个WEB项目都能使用这个上下文。
	3、接着容器会将读取到<context-param>转化为键值对,并交给ServletContext。
	4、容器创建<listener></listener>中的类实例,即创建监听（备注：listener定义的类可以是自定义的类但必须需要继承ServletContextListener）。
	5、在监听的类中会有一个contextInitialized(ServletContextEvent event)初始化方法，在这个方法中可以
	通过event.getServletContext().getInitParameter("contextConfigLocation") 来得到context-param 设定的值。
	在这个类中还必须有一个contextDestroyed(ServletContextEvent event) 销毁方法.用于关闭应用前释放资源，比如说数据库连接的关闭。
	6、得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早。
  -->
  
  
  <!-- 该元素用来声明应用范围(整个WEB项目)内的上下文初始化参数 -->
  <context-param>
  		<param-name>contextConfigLocation</param-name>
  		<param-value>classpath*:config/springAnnotation-*.xml</param-value>
  </context-param>
  
  
  <!-- 一.WebContextLoaderListener 监听类
  		它能捕捉到服务器的启动和停止，在启动和停止触发里面的方法做相应的操作! -->
  <listener>
  	 <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  
  <!-- Spring MVC配置 -->
  <!-- ====================================== -->
  <servlet>
    <servlet-name>spring</servlet-name>
    <servlet-class>
				org.springframework.web.servlet.DispatcherServlet
	</servlet-class>
		<!-- 可以自定义servlet.xml配置文件的位置和名称，默认为WEB-INF目录下，名称为[<servlet-name>]-servlet.xml，如spring-servlet.xml -->
	    <init-param>
	        <param-name>contextConfigLocation</param-name>
	       <!-- <param-value>/WEB-INF/spring-servlet.xml</param-value>		&nbsp; 默认  /WEB-INF/spring-servlet.xml-->
	        <param-value>classpath*:config/springAnnotation-servlet.xml</param-value>
	    </init-param> 
	   
    <load-on-startup>1</load-on-startup>
  </servlet>
  
  
  <!-- 解决中文乱码 -->  
  <!-- ====================================== -->
  <filter>  
       <filter-name>characterEncodingFilter</filter-name>  
       <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>  
       <init-param>  
           <param-name>encoding</param-name>  
           <param-value>UTF-8</param-value>  
       </init-param>  
       <init-param>  
           <param-name>forceEncoding</param-name>  <!-- 是否强制转码 -->
           <param-value>true</param-value>  
       </init-param>  
   </filter>  
   <filter-mapping>  
       <filter-name>characterEncodingFilter</filter-name>  
       <url-pattern>/*</url-pattern>  
   </filter-mapping> 
  
  <servlet-mapping>
    <servlet-name>spring</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping> 
  
  <!-- static resources -->  
  <!-- ====================================== -->
    <servlet-mapping>  
        <servlet-name>spring</servlet-name>  
        <url-pattern>*.css</url-pattern>  
    </servlet-mapping>  
  
    <servlet-mapping>  
        <servlet-name>spring</servlet-name>  
        <url-pattern>*.gif</url-pattern>  
  
    </servlet-mapping>  
  
    <servlet-mapping>  
        <servlet-name>spring</servlet-name>  
        <url-pattern>*.jpg</url-pattern>  
    </servlet-mapping> 
    
    <servlet-mapping>  
        <servlet-name>spring</servlet-name>  
        <url-pattern>*.png</url-pattern>  
    </servlet-mapping>  
  
    <servlet-mapping>  
        <servlet-name>spring</servlet-name>  
        <url-pattern>*.js</url-pattern>  
    </servlet-mapping>  


  <!-- 解决hibernate的Session的关闭与开启问题。 
  用来把一个Hibernate Session和一次完整的请求过程对应的线程相绑定。
  目的是为了实现"Open Session in View"的模式。例如： 它允许在事务提交之后延迟加载显示所需要的对象。 -->  
  <!-- ====================================== -->
   <filter>
  		<filter-name>openSession</filter-name>
  		<filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
  </filter>
  
  <filter-mapping>
  	<filter-name>openSession</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  
  
</web-app>